apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'


def isJava = plugins.hasPlugin('java')
// Add checkstyle, findbugs, pmd and lint to the check task.
check.dependsOn 'checkstyle', 'findbugs', 'pmd'
if (!isJava) {
    check.dependsOn 'lint'
}

/** ########################## checkstyle ########################## */
checkstyle {
    toolVersion = '8.8'
    showViolations true
}

task checkstyle(type: Checkstyle, group: 'verification') {
    // Where my checkstyle config is...
    configFile file("${project.rootDir}/config/quality/checkstyle/checkstyle.xml")
    // Where is my suppressions file for checkstyle is...
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/config/quality/checkstyle/suppressions.xml").absolutePath
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/test/**'
    exclude '**/androidTest/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    classpath = files()

    reports {
        xml.enabled = false
        html.enabled = true
        xml.destination file("$project.buildDir/reports/checkstyle/checkstyle.xml")
        html.destination file("$project.buildDir/reports/checkstyle/checkstyle.html")
    }
}

/** ########################### findbugs ########################### */
findbugs {
    toolVersion = "3.0.1"
    ignoreFailures = true
    effort = "max"
    reportLevel = "high"
    excludeFilter = new File("${project.rootDir}/config/quality/findbugs/findbugs-filter.xml")
}

task findbugs(type: FindBugs, dependsOn: 'assembleDebug', group: 'verification') {
    if (isJava) {
        classes = files("$projectDir.absolutePath/build/classes")
    } else {
        classes = files("$projectDir.absolutePath/build/intermediates/classes")
    }
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        // FindBugs tasks can only have one report enabled, however more than one report was enabled. You need to disable all but one of them.
        xml.enabled = true
        html.enabled = false
        xml.destination file("$project.buildDir/reports/findbugs/findbugs.xml")
        html.destination file("$project.buildDir/reports/findbugs/findbugs.html")
    }

    classpath = files()
}

/** ############################# pmd ############################# */
pmd {
    toolVersion = '6.1.0'
    ignoreFailures = true
    ruleSetFiles = files("${project.rootDir}/config/quality/pmd/pmd-ruleset.xml")
    ruleSets = []
}

task pmd(type: Pmd, group: 'verification') {
    source 'src'
    include '**/*.java'
    exclude('**/gen/**', '**/debug.sh/**')

    reports {
        xml.enabled = false
        html.enabled = true
        xml.destination file("$project.buildDir/reports/pmd/pmd.xml")
        html.destination file("$project.buildDir/reports/pmd/pmd.html")
    }
}

/** ########################## lint ########################## */
if (!isJava) {
    android {
        lintOptions {
            disable 'NewApi' // gradle build will compile code use `Objects.requireNonNull()` for lambda
            abortOnError false
            ignoreWarnings true
            xmlReport false
            xmlOutput file("${project.buildDir}/reports/lint/lint-report.xml")
            htmlReport true
            htmlOutput file("${project.buildDir}/reports/lint/lint-report.html")
            lintConfig file("${project.rootDir}/config/quality/lint/lint.xml")
        }
    }
}
